
generador.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000003c  00800100  00000378  0000040c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000378  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000000d0  0080013c  0080013c  00000448  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000448  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000478  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000110  00000000  00000000  000004b8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000094b  00000000  00000000  000005c8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000047d  00000000  00000000  00000f13  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000652  00000000  00000000  00001390  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000002e8  00000000  00000000  000019e4  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000436  00000000  00000000  00001ccc  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000771  00000000  00000000  00002102  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000110  00000000  00000000  00002873  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 71 00 	jmp	0xe2	; 0xe2 <__vector_18>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 97 00 	jmp	0x12e	; 0x12e <__vector_20>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e8 e7       	ldi	r30, 0x78	; 120
  7c:	f3 e0       	ldi	r31, 0x03	; 3
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	ac 33       	cpi	r26, 0x3C	; 60
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	22 e0       	ldi	r18, 0x02	; 2
  8c:	ac e3       	ldi	r26, 0x3C	; 60
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	ac 30       	cpi	r26, 0x0C	; 12
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 53 00 	call	0xa6	; 0xa6 <main>
  9e:	0c 94 ba 01 	jmp	0x374	; 0x374 <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <main>:
// 	SerialPort_Init(103); 		// Inicializo el Puerto Serie. Con 103 para BAUDRATE = 9600 @ 16MHz
// 	SerialPort_TX_Enable();		// Activo el Transmisor del Puerto Serie
// 	SerialPort_RX_Enable();		// Activo el Receptor del Puerto Serie
// 	SerialPort_RX_Interrupt_Enable();	// Activo Interrupci�n de recepcion.
// 	sei();								// Activo la mascara global de interrupciones (Bit I del SREG en 1)
	uart_cb_init(103);
  a6:	87 e6       	ldi	r24, 0x67	; 103
  a8:	0e 94 06 01 	call	0x20c	; 0x20c <uart_cb_init>
	//strcpy(Buffer,msg1);
	//uart_cb_preparar_transmision(Buffer);
	//uart_cb_listo_para_transmitir();
	SerialPort_Send_String("No se por que, pero me necesitas \r\n");    // Envio el mensaje de Bienvenida
  ac:	80 e0       	ldi	r24, 0x00	; 0
  ae:	91 e0       	ldi	r25, 0x01	; 1
  b0:	0e 94 dd 00 	call	0x1ba	; 0x1ba <SerialPort_Send_String>

	while(1)
	{
		if( FLAG_linea_recibida == 1)
  b4:	80 91 3c 01 	lds	r24, 0x013C	; 0x80013c <__data_end>
  b8:	81 30       	cpi	r24, 0x01	; 1
  ba:	e1 f7       	brne	.-8      	; 0xb4 <main+0xe>
		{
			//SerialPort_Send_String((char *)BufferRX);  // Eco del string (inciso a)
			//strcpy(BufferTX,BufferRX);	// Eco del string usando int TX (inciso b)
			uart_cb_ultima_recepcion(Buffer);
  bc:	8d e3       	ldi	r24, 0x3D	; 61
  be:	91 e0       	ldi	r25, 0x01	; 1
  c0:	0e 94 56 01 	call	0x2ac	; 0x2ac <uart_cb_ultima_recepcion>
			uart_cb_preparar_transmision(Buffer);
  c4:	8d e3       	ldi	r24, 0x3D	; 61
  c6:	91 e0       	ldi	r25, 0x01	; 1
  c8:	0e 94 8f 01 	call	0x31e	; 0x31e <uart_cb_preparar_transmision>
			//UCSR0B |= (1<<TXCIE0);
			uart_cb_listo_para_transmitir();
  cc:	0e 94 10 01 	call	0x220	; 0x220 <uart_cb_listo_para_transmitir>
			uart_cb_preparar_transmision("\r\nHasta aca, todo bien");
  d0:	84 e2       	ldi	r24, 0x24	; 36
  d2:	91 e0       	ldi	r25, 0x01	; 1
  d4:	0e 94 8f 01 	call	0x31e	; 0x31e <uart_cb_preparar_transmision>
			uart_cb_listo_para_transmitir();
  d8:	0e 94 10 01 	call	0x220	; 0x220 <uart_cb_listo_para_transmitir>
			FLAG_linea_recibida=0;
  dc:	10 92 3c 01 	sts	0x013C, r1	; 0x80013c <__data_end>
  e0:	e9 cf       	rjmp	.-46     	; 0xb4 <main+0xe>

000000e2 <__vector_18>:

//*************************************************
//Handler de Interrupcion de byte Recibido
//**************************************************

ISR(USART_RX_vect){
  e2:	1f 92       	push	r1
  e4:	0f 92       	push	r0
  e6:	0f b6       	in	r0, 0x3f	; 63
  e8:	0f 92       	push	r0
  ea:	11 24       	eor	r1, r1
  ec:	2f 93       	push	r18
  ee:	3f 93       	push	r19
  f0:	4f 93       	push	r20
  f2:	5f 93       	push	r21
  f4:	6f 93       	push	r22
  f6:	7f 93       	push	r23
  f8:	8f 93       	push	r24
  fa:	9f 93       	push	r25
  fc:	af 93       	push	r26
  fe:	bf 93       	push	r27
 100:	ef 93       	push	r30
 102:	ff 93       	push	r31

	FLAG_linea_recibida = uart_cb_isr_rx();
 104:	0e 94 1c 01 	call	0x238	; 0x238 <uart_cb_isr_rx>
 108:	80 93 3c 01 	sts	0x013C, r24	; 0x80013c <__data_end>
// 		//		BufferRX[Index++]='\n';
// 		BufferRX[Index]='\0';
// 		Index=0;
// 		FLAG_linea_recibida=1;
// 	}
}
 10c:	ff 91       	pop	r31
 10e:	ef 91       	pop	r30
 110:	bf 91       	pop	r27
 112:	af 91       	pop	r26
 114:	9f 91       	pop	r25
 116:	8f 91       	pop	r24
 118:	7f 91       	pop	r23
 11a:	6f 91       	pop	r22
 11c:	5f 91       	pop	r21
 11e:	4f 91       	pop	r20
 120:	3f 91       	pop	r19
 122:	2f 91       	pop	r18
 124:	0f 90       	pop	r0
 126:	0f be       	out	0x3f, r0	; 63
 128:	0f 90       	pop	r0
 12a:	1f 90       	pop	r1
 12c:	18 95       	reti

0000012e <__vector_20>:

//*************************************************
//Handler de Interrupcion de Transmisi�n Completa TXC
//**************************************************

ISR(USART_TX_vect){ //handler de interrupci�n de TXC 
 12e:	1f 92       	push	r1
 130:	0f 92       	push	r0
 132:	0f b6       	in	r0, 0x3f	; 63
 134:	0f 92       	push	r0
 136:	11 24       	eor	r1, r1
 138:	2f 93       	push	r18
 13a:	3f 93       	push	r19
 13c:	4f 93       	push	r20
 13e:	5f 93       	push	r21
 140:	6f 93       	push	r22
 142:	7f 93       	push	r23
 144:	8f 93       	push	r24
 146:	9f 93       	push	r25
 148:	af 93       	push	r26
 14a:	bf 93       	push	r27
 14c:	ef 93       	push	r30
 14e:	ff 93       	push	r31

	uart_cb_isr_tx();
 150:	0e 94 5b 01 	call	0x2b6	; 0x2b6 <uart_cb_isr_tx>
// 		UDR0='\r';
// 		UDR0='\n'; //ojo esto es posible porque tengo FIFO de 2 bytes en TX
// 		Txindex=0;
// 		uart_cb_transmision_completa();//deshabiito int de TXC hasta que necesite transmitir nuevamnete
// 	}
 154:	ff 91       	pop	r31
 156:	ef 91       	pop	r30
 158:	bf 91       	pop	r27
 15a:	af 91       	pop	r26
 15c:	9f 91       	pop	r25
 15e:	8f 91       	pop	r24
 160:	7f 91       	pop	r23
 162:	6f 91       	pop	r22
 164:	5f 91       	pop	r21
 166:	4f 91       	pop	r20
 168:	3f 91       	pop	r19
 16a:	2f 91       	pop	r18
 16c:	0f 90       	pop	r0
 16e:	0f be       	out	0x3f, r0	; 63
 170:	0f 90       	pop	r0
 172:	1f 90       	pop	r1
 174:	18 95       	reti

00000176 <SerialPort_Init>:
	// Pooling - Bloqueante hasta que termine de transmitir.
	while(!(UCSR0A & (1<<UDRE0)));
}

void SerialPort_Send_Data(char data){
	UDR0 = data;
 176:	10 92 c1 00 	sts	0x00C1, r1	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
 17a:	96 e0       	ldi	r25, 0x06	; 6
 17c:	90 93 c2 00 	sts	0x00C2, r25	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7e00c2>
 180:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7e00c5>
 184:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7e00c4>
 188:	08 95       	ret

0000018a <SerialPort_TX_Enable>:
 18a:	e1 ec       	ldi	r30, 0xC1	; 193
 18c:	f0 e0       	ldi	r31, 0x00	; 0
 18e:	80 81       	ld	r24, Z
 190:	88 60       	ori	r24, 0x08	; 8
 192:	80 83       	st	Z, r24
 194:	08 95       	ret

00000196 <SerialPort_RX_Enable>:
 196:	e1 ec       	ldi	r30, 0xC1	; 193
 198:	f0 e0       	ldi	r31, 0x00	; 0
 19a:	80 81       	ld	r24, Z
 19c:	80 61       	ori	r24, 0x10	; 16
 19e:	80 83       	st	Z, r24
 1a0:	08 95       	ret

000001a2 <SerialPort_RX_Interrupt_Enable>:
 1a2:	e1 ec       	ldi	r30, 0xC1	; 193
 1a4:	f0 e0       	ldi	r31, 0x00	; 0
 1a6:	80 81       	ld	r24, Z
 1a8:	80 68       	ori	r24, 0x80	; 128
 1aa:	80 83       	st	Z, r24
 1ac:	08 95       	ret

000001ae <SerialPort_Wait_For_TX_Buffer_Free>:
 1ae:	e0 ec       	ldi	r30, 0xC0	; 192
 1b0:	f0 e0       	ldi	r31, 0x00	; 0
 1b2:	80 81       	ld	r24, Z
 1b4:	85 ff       	sbrs	r24, 5
 1b6:	fd cf       	rjmp	.-6      	; 0x1b2 <SerialPort_Wait_For_TX_Buffer_Free+0x4>
 1b8:	08 95       	ret

000001ba <SerialPort_Send_String>:
}

void SerialPort_Send_String(char * msg){ //msg -> "Hola como andan hoy?" 20 ASCII+findecadena, tardo=20ms
 1ba:	cf 92       	push	r12
 1bc:	df 92       	push	r13
 1be:	ef 92       	push	r14
 1c0:	ff 92       	push	r15
 1c2:	0f 93       	push	r16
 1c4:	1f 93       	push	r17
 1c6:	cf 93       	push	r28
	uint8_t i = 0;
	//'\0' = 0x00
	while(msg[i]){ // *(msg+i)
 1c8:	fc 01       	movw	r30, r24
 1ca:	20 81       	ld	r18, Z
 1cc:	22 23       	and	r18, r18
 1ce:	b1 f0       	breq	.+44     	; 0x1fc <SerialPort_Send_String+0x42>
 1d0:	7c 01       	movw	r14, r24
 1d2:	8c 01       	movw	r16, r24
 1d4:	c0 e0       	ldi	r28, 0x00	; 0
	// Pooling - Bloqueante hasta que termine de transmitir.
	while(!(UCSR0A & (1<<UDRE0)));
}

void SerialPort_Send_Data(char data){
	UDR0 = data;
 1d6:	0f 2e       	mov	r0, r31
 1d8:	f6 ec       	ldi	r31, 0xC6	; 198
 1da:	cf 2e       	mov	r12, r31
 1dc:	d1 2c       	mov	r13, r1
 1de:	f0 2d       	mov	r31, r0

void SerialPort_Send_String(char * msg){ //msg -> "Hola como andan hoy?" 20 ASCII+findecadena, tardo=20ms
	uint8_t i = 0;
	//'\0' = 0x00
	while(msg[i]){ // *(msg+i)
		SerialPort_Wait_For_TX_Buffer_Free(); //9600bps formato 8N1, 10bits, 10.Tbit=10/9600=1ms 
 1e0:	0e 94 d7 00 	call	0x1ae	; 0x1ae <SerialPort_Wait_For_TX_Buffer_Free>
		SerialPort_Send_Data(msg[i]);
 1e4:	f8 01       	movw	r30, r16
 1e6:	90 81       	ld	r25, Z
	// Pooling - Bloqueante hasta que termine de transmitir.
	while(!(UCSR0A & (1<<UDRE0)));
}

void SerialPort_Send_Data(char data){
	UDR0 = data;
 1e8:	f6 01       	movw	r30, r12
 1ea:	90 83       	st	Z, r25
	uint8_t i = 0;
	//'\0' = 0x00
	while(msg[i]){ // *(msg+i)
		SerialPort_Wait_For_TX_Buffer_Free(); //9600bps formato 8N1, 10bits, 10.Tbit=10/9600=1ms 
		SerialPort_Send_Data(msg[i]);
		i++;
 1ec:	cf 5f       	subi	r28, 0xFF	; 255
}

void SerialPort_Send_String(char * msg){ //msg -> "Hola como andan hoy?" 20 ASCII+findecadena, tardo=20ms
	uint8_t i = 0;
	//'\0' = 0x00
	while(msg[i]){ // *(msg+i)
 1ee:	87 01       	movw	r16, r14
 1f0:	0c 0f       	add	r16, r28
 1f2:	11 1d       	adc	r17, r1
 1f4:	f8 01       	movw	r30, r16
 1f6:	90 81       	ld	r25, Z
 1f8:	91 11       	cpse	r25, r1
 1fa:	f2 cf       	rjmp	.-28     	; 0x1e0 <SerialPort_Send_String+0x26>
		SerialPort_Wait_For_TX_Buffer_Free(); //9600bps formato 8N1, 10bits, 10.Tbit=10/9600=1ms 
		SerialPort_Send_Data(msg[i]);
		i++;
	}
}
 1fc:	cf 91       	pop	r28
 1fe:	1f 91       	pop	r17
 200:	0f 91       	pop	r16
 202:	ff 90       	pop	r15
 204:	ef 90       	pop	r14
 206:	df 90       	pop	r13
 208:	cf 90       	pop	r12
 20a:	08 95       	ret

0000020c <uart_cb_init>:
}

char uart_cb_recibir_dato()
{
	return UDR0;
}
 20c:	0e 94 bb 00 	call	0x176	; 0x176 <SerialPort_Init>
 210:	0e 94 c5 00 	call	0x18a	; 0x18a <SerialPort_TX_Enable>
 214:	0e 94 cb 00 	call	0x196	; 0x196 <SerialPort_RX_Enable>
 218:	0e 94 d1 00 	call	0x1a2	; 0x1a2 <SerialPort_RX_Interrupt_Enable>
 21c:	78 94       	sei
 21e:	08 95       	ret

00000220 <uart_cb_listo_para_transmitir>:
 220:	e1 ec       	ldi	r30, 0xC1	; 193
 222:	f0 e0       	ldi	r31, 0x00	; 0
 224:	80 81       	ld	r24, Z
 226:	80 64       	ori	r24, 0x40	; 64
 228:	80 83       	st	Z, r24
 22a:	08 95       	ret

0000022c <uart_cb_transmision_completa>:
 22c:	e1 ec       	ldi	r30, 0xC1	; 193
 22e:	f0 e0       	ldi	r31, 0x00	; 0
 230:	80 81       	ld	r24, Z
 232:	8f 7b       	andi	r24, 0xBF	; 191
 234:	80 83       	st	Z, r24
 236:	08 95       	ret

00000238 <uart_cb_isr_rx>:

char uart_cb_isr_rx()
{
 238:	cf 93       	push	r28
 23a:	df 93       	push	r29
 23c:	1f 92       	push	r1
 23e:	cd b7       	in	r28, 0x3d	; 61
 240:	de b7       	in	r29, 0x3e	; 62
		volatile char RX_Data = '\r';
 242:	8d e0       	ldi	r24, 0x0D	; 13
 244:	89 83       	std	Y+1, r24	; 0x01
	UDR0 = dato;
}

char uart_cb_recibir_dato()
{
	return UDR0;
 246:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
char uart_cb_isr_rx()
{
		volatile char RX_Data = '\r';
		static short int rxIndex=0;

		RX_Data = uart_cb_recibir_dato();
 24a:	89 83       	std	Y+1, r24	; 0x01

		if(RX_Data != '\r'){
 24c:	89 81       	ldd	r24, Y+1	; 0x01
 24e:	8d 30       	cpi	r24, 0x0D	; 13
 250:	e9 f0       	breq	.+58     	; 0x28c <uart_cb_isr_rx+0x54>
			if(rxIndex >= tam_buffer)
 252:	80 91 7f 01 	lds	r24, 0x017F	; 0x80017f <rxIndex.1660>
 256:	90 91 80 01 	lds	r25, 0x0180	; 0x800180 <rxIndex.1660+0x1>
 25a:	85 34       	cpi	r24, 0x45	; 69
 25c:	91 05       	cpc	r25, r1
 25e:	24 f0       	brlt	.+8      	; 0x268 <uart_cb_isr_rx+0x30>
			{
				rxIndex = 0;
 260:	10 92 80 01 	sts	0x0180, r1	; 0x800180 <rxIndex.1660+0x1>
 264:	10 92 7f 01 	sts	0x017F, r1	; 0x80017f <rxIndex.1660>
			}
			BufferRX[rxIndex++] = RX_Data;
 268:	80 91 7f 01 	lds	r24, 0x017F	; 0x80017f <rxIndex.1660>
 26c:	90 91 80 01 	lds	r25, 0x0180	; 0x800180 <rxIndex.1660+0x1>
 270:	9c 01       	movw	r18, r24
 272:	2f 5f       	subi	r18, 0xFF	; 255
 274:	3f 4f       	sbci	r19, 0xFF	; 255
 276:	30 93 80 01 	sts	0x0180, r19	; 0x800180 <rxIndex.1660+0x1>
 27a:	20 93 7f 01 	sts	0x017F, r18	; 0x80017f <rxIndex.1660>
 27e:	29 81       	ldd	r18, Y+1	; 0x01
 280:	fc 01       	movw	r30, r24
 282:	e9 53       	subi	r30, 0x39	; 57
 284:	fe 4f       	sbci	r31, 0xFE	; 254
 286:	20 83       	st	Z, r18
		else{
			BufferRX[rxIndex] = '\0';
			rxIndex = 0;
			return 1;
		}
		return 0;
 288:	80 e0       	ldi	r24, 0x00	; 0
 28a:	0c c0       	rjmp	.+24     	; 0x2a4 <uart_cb_isr_rx+0x6c>
				rxIndex = 0;
			}
			BufferRX[rxIndex++] = RX_Data;
		}
		else{
			BufferRX[rxIndex] = '\0';
 28c:	e0 91 7f 01 	lds	r30, 0x017F	; 0x80017f <rxIndex.1660>
 290:	f0 91 80 01 	lds	r31, 0x0180	; 0x800180 <rxIndex.1660+0x1>
 294:	e9 53       	subi	r30, 0x39	; 57
 296:	fe 4f       	sbci	r31, 0xFE	; 254
 298:	10 82       	st	Z, r1
			rxIndex = 0;
 29a:	10 92 80 01 	sts	0x0180, r1	; 0x800180 <rxIndex.1660+0x1>
 29e:	10 92 7f 01 	sts	0x017F, r1	; 0x80017f <rxIndex.1660>
			return 1;
 2a2:	81 e0       	ldi	r24, 0x01	; 1
		}
		return 0;
}
 2a4:	0f 90       	pop	r0
 2a6:	df 91       	pop	r29
 2a8:	cf 91       	pop	r28
 2aa:	08 95       	ret

000002ac <uart_cb_ultima_recepcion>:

void uart_cb_ultima_recepcion(char *paquete)
{
	strcpy(paquete,BufferRX);
 2ac:	67 ec       	ldi	r22, 0xC7	; 199
 2ae:	71 e0       	ldi	r23, 0x01	; 1
 2b0:	0e 94 b3 01 	call	0x366	; 0x366 <strcpy>
 2b4:	08 95       	ret

000002b6 <uart_cb_isr_tx>:
}

void uart_cb_isr_tx()
{
 2b6:	cf 93       	push	r28
 2b8:	df 93       	push	r29
	static short int txIndex = 0;
	
	if(BufferTX[txIndex] != '\0' && txIndex < tam_buffer)
 2ba:	80 91 7d 01 	lds	r24, 0x017D	; 0x80017d <txIndex.1666>
 2be:	90 91 7e 01 	lds	r25, 0x017E	; 0x80017e <txIndex.1666+0x1>
 2c2:	fc 01       	movw	r30, r24
 2c4:	ee 57       	subi	r30, 0x7E	; 126
 2c6:	fe 4f       	sbci	r31, 0xFE	; 254
 2c8:	20 81       	ld	r18, Z
 2ca:	22 23       	and	r18, r18
 2cc:	99 f0       	breq	.+38     	; 0x2f4 <uart_cb_isr_tx+0x3e>
 2ce:	85 34       	cpi	r24, 0x45	; 69
 2d0:	91 05       	cpc	r25, r1
 2d2:	84 f4       	brge	.+32     	; 0x2f4 <uart_cb_isr_tx+0x3e>
	{
		uart_cb_enviar_dato(BufferTX[txIndex++]);
 2d4:	9c 01       	movw	r18, r24
 2d6:	2f 5f       	subi	r18, 0xFF	; 255
 2d8:	3f 4f       	sbci	r19, 0xFF	; 255
 2da:	30 93 7e 01 	sts	0x017E, r19	; 0x80017e <txIndex.1666+0x1>
 2de:	20 93 7d 01 	sts	0x017D, r18	; 0x80017d <txIndex.1666>
 2e2:	fc 01       	movw	r30, r24
 2e4:	ee 57       	subi	r30, 0x7E	; 126
 2e6:	fe 4f       	sbci	r31, 0xFE	; 254
 2e8:	c0 81       	ld	r28, Z
}


void uart_cb_enviar_dato(char dato)
{
	SerialPort_Wait_For_TX_Buffer_Free();
 2ea:	0e 94 d7 00 	call	0x1ae	; 0x1ae <SerialPort_Wait_For_TX_Buffer_Free>
	UDR0 = dato;
 2ee:	c0 93 c6 00 	sts	0x00C6, r28	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
 2f2:	12 c0       	rjmp	.+36     	; 0x318 <uart_cb_isr_tx+0x62>
}


void uart_cb_enviar_dato(char dato)
{
	SerialPort_Wait_For_TX_Buffer_Free();
 2f4:	0e 94 d7 00 	call	0x1ae	; 0x1ae <SerialPort_Wait_For_TX_Buffer_Free>
	UDR0 = dato;
 2f8:	c6 ec       	ldi	r28, 0xC6	; 198
 2fa:	d0 e0       	ldi	r29, 0x00	; 0
 2fc:	8d e0       	ldi	r24, 0x0D	; 13
 2fe:	88 83       	st	Y, r24
}


void uart_cb_enviar_dato(char dato)
{
	SerialPort_Wait_For_TX_Buffer_Free();
 300:	0e 94 d7 00 	call	0x1ae	; 0x1ae <SerialPort_Wait_For_TX_Buffer_Free>
	UDR0 = dato;
 304:	8a e0       	ldi	r24, 0x0A	; 10
 306:	88 83       	st	Y, r24
	}
	else
	{
		uart_cb_enviar_dato('\r');
		uart_cb_enviar_dato('\n'); //ojo esto es posible porque tengo FIFO de 2 bytes en TX
		txIndex = 0;
 308:	10 92 7e 01 	sts	0x017E, r1	; 0x80017e <txIndex.1666+0x1>
 30c:	10 92 7d 01 	sts	0x017D, r1	; 0x80017d <txIndex.1666>
		BufferTX[txIndex] = '\0';
 310:	10 92 82 01 	sts	0x0182, r1	; 0x800182 <BufferTX>
		uart_cb_transmision_completa();//deshabiito int de TXC hasta que necesite transmitir nuevamnete
 314:	0e 94 16 01 	call	0x22c	; 0x22c <uart_cb_transmision_completa>
	}
}
 318:	df 91       	pop	r29
 31a:	cf 91       	pop	r28
 31c:	08 95       	ret

0000031e <uart_cb_preparar_transmision>:

void uart_cb_preparar_transmision(char *paquete)
{
 31e:	dc 01       	movw	r26, r24
	nivel_bufferTx = nivel_bufferTx + strlen(paquete) + 1;
 320:	fc 01       	movw	r30, r24
 322:	01 90       	ld	r0, Z+
 324:	00 20       	and	r0, r0
 326:	e9 f7       	brne	.-6      	; 0x322 <uart_cb_preparar_transmision+0x4>
 328:	31 97       	sbiw	r30, 0x01	; 1
 32a:	e8 1b       	sub	r30, r24
 32c:	f9 0b       	sbc	r31, r25
 32e:	90 91 81 01 	lds	r25, 0x0181	; 0x800181 <nivel_bufferTx>
 332:	9f 5f       	subi	r25, 0xFF	; 255
 334:	e9 0f       	add	r30, r25
 336:	e0 93 81 01 	sts	0x0181, r30	; 0x800181 <nivel_bufferTx>
	if (nivel_bufferTx < tam_buffer)
 33a:	e5 34       	cpi	r30, 0x45	; 69
 33c:	30 f4       	brcc	.+12     	; 0x34a <uart_cb_preparar_transmision+0x2c>
 33e:	bd 01       	movw	r22, r26
	{
		strcat(BufferTX,paquete);
 340:	82 e8       	ldi	r24, 0x82	; 130
 342:	91 e0       	ldi	r25, 0x01	; 1
 344:	0e 94 a8 01 	call	0x350	; 0x350 <strcat>
 348:	08 95       	ret
	}
	else
	{
		nivel_bufferTx = 0;
 34a:	10 92 81 01 	sts	0x0181, r1	; 0x800181 <nivel_bufferTx>
 34e:	08 95       	ret

00000350 <strcat>:
 350:	fb 01       	movw	r30, r22
 352:	dc 01       	movw	r26, r24
 354:	0d 90       	ld	r0, X+
 356:	00 20       	and	r0, r0
 358:	e9 f7       	brne	.-6      	; 0x354 <strcat+0x4>
 35a:	11 97       	sbiw	r26, 0x01	; 1
 35c:	01 90       	ld	r0, Z+
 35e:	0d 92       	st	X+, r0
 360:	00 20       	and	r0, r0
 362:	e1 f7       	brne	.-8      	; 0x35c <strcat+0xc>
 364:	08 95       	ret

00000366 <strcpy>:
 366:	fb 01       	movw	r30, r22
 368:	dc 01       	movw	r26, r24
 36a:	01 90       	ld	r0, Z+
 36c:	0d 92       	st	X+, r0
 36e:	00 20       	and	r0, r0
 370:	e1 f7       	brne	.-8      	; 0x36a <strcpy+0x4>
 372:	08 95       	ret

00000374 <_exit>:
 374:	f8 94       	cli

00000376 <__stop_program>:
 376:	ff cf       	rjmp	.-2      	; 0x376 <__stop_program>
