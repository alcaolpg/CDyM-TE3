
generador.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000001a  00800100  00000374  00000408  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000374  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000246  0080011a  0080011a  00000422  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000422  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000454  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000110  00000000  00000000  00000494  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000947  00000000  00000000  000005a4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000047d  00000000  00000000  00000eeb  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000063c  00000000  00000000  00001368  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000002e8  00000000  00000000  000019a4  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000436  00000000  00000000  00001c8c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000761  00000000  00000000  000020c2  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000110  00000000  00000000  00002823  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 6d 00 	jmp	0xda	; 0xda <__vector_18>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 93 00 	jmp	0x126	; 0x126 <__vector_20>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e4 e7       	ldi	r30, 0x74	; 116
  7c:	f3 e0       	ldi	r31, 0x03	; 3
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	aa 31       	cpi	r26, 0x1A	; 26
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	23 e0       	ldi	r18, 0x03	; 3
  8c:	aa e1       	ldi	r26, 0x1A	; 26
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	a0 36       	cpi	r26, 0x60	; 96
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 53 00 	call	0xa6	; 0xa6 <main>
  9e:	0c 94 b8 01 	jmp	0x370	; 0x370 <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <main>:
// 	SerialPort_Init(103); 		// Inicializo el Puerto Serie. Con 103 para BAUDRATE = 9600 @ 16MHz
// 	SerialPort_TX_Enable();		// Activo el Transmisor del Puerto Serie
// 	SerialPort_RX_Enable();		// Activo el Receptor del Puerto Serie
// 	SerialPort_RX_Interrupt_Enable();	// Activo Interrupci�n de recepcion.
// 	sei();								// Activo la mascara global de interrupciones (Bit I del SREG en 1)
	uart_cb_init(103);
  a6:	87 e6       	ldi	r24, 0x67	; 103
  a8:	0e 94 02 01 	call	0x204	; 0x204 <uart_cb_init>
	//uart_cb_listo_para_transmitir();
	// Envio el mensaje de Bienvenida

	while(1)
	{
		if( FLAG_linea_recibida == 1)
  ac:	80 91 1a 01 	lds	r24, 0x011A	; 0x80011a <__data_end>
  b0:	81 30       	cpi	r24, 0x01	; 1
  b2:	e1 f7       	brne	.-8      	; 0xac <main+0x6>
		{
			//SerialPort_Send_String((char *)BufferRX);  // Eco del string (inciso a)
			//strcpy(BufferTX,BufferRX);	// Eco del string usando int TX (inciso b)
			uart_cb_ultima_recepcion(Buffer);
  b4:	8b e1       	ldi	r24, 0x1B	; 27
  b6:	91 e0       	ldi	r25, 0x01	; 1
  b8:	0e 94 57 01 	call	0x2ae	; 0x2ae <uart_cb_ultima_recepcion>
			uart_cb_preparar_transmision(Buffer);
  bc:	8b e1       	ldi	r24, 0x1B	; 27
  be:	91 e0       	ldi	r25, 0x01	; 1
  c0:	0e 94 93 01 	call	0x326	; 0x326 <uart_cb_preparar_transmision>
			//UCSR0B |= (1<<TXCIE0);
			uart_cb_listo_para_transmitir();
  c4:	0e 94 10 01 	call	0x220	; 0x220 <uart_cb_listo_para_transmitir>
			uart_cb_preparar_transmision("\r\nHasta aca, todo bien");
  c8:	80 e0       	ldi	r24, 0x00	; 0
  ca:	91 e0       	ldi	r25, 0x01	; 1
  cc:	0e 94 93 01 	call	0x326	; 0x326 <uart_cb_preparar_transmision>
			uart_cb_listo_para_transmitir();
  d0:	0e 94 10 01 	call	0x220	; 0x220 <uart_cb_listo_para_transmitir>
			FLAG_linea_recibida=0;
  d4:	10 92 1a 01 	sts	0x011A, r1	; 0x80011a <__data_end>
  d8:	e9 cf       	rjmp	.-46     	; 0xac <main+0x6>

000000da <__vector_18>:

//*************************************************
//Handler de Interrupcion de byte Recibido
//**************************************************

ISR(USART_RX_vect){
  da:	1f 92       	push	r1
  dc:	0f 92       	push	r0
  de:	0f b6       	in	r0, 0x3f	; 63
  e0:	0f 92       	push	r0
  e2:	11 24       	eor	r1, r1
  e4:	2f 93       	push	r18
  e6:	3f 93       	push	r19
  e8:	4f 93       	push	r20
  ea:	5f 93       	push	r21
  ec:	6f 93       	push	r22
  ee:	7f 93       	push	r23
  f0:	8f 93       	push	r24
  f2:	9f 93       	push	r25
  f4:	af 93       	push	r26
  f6:	bf 93       	push	r27
  f8:	ef 93       	push	r30
  fa:	ff 93       	push	r31

	FLAG_linea_recibida = uart_cb_isr_rx();
  fc:	0e 94 1c 01 	call	0x238	; 0x238 <uart_cb_isr_rx>
 100:	80 93 1a 01 	sts	0x011A, r24	; 0x80011a <__data_end>
// 		//		BufferRX[Index++]='\n';
// 		BufferRX[Index]='\0';
// 		Index=0;
// 		FLAG_linea_recibida=1;
// 	}
}
 104:	ff 91       	pop	r31
 106:	ef 91       	pop	r30
 108:	bf 91       	pop	r27
 10a:	af 91       	pop	r26
 10c:	9f 91       	pop	r25
 10e:	8f 91       	pop	r24
 110:	7f 91       	pop	r23
 112:	6f 91       	pop	r22
 114:	5f 91       	pop	r21
 116:	4f 91       	pop	r20
 118:	3f 91       	pop	r19
 11a:	2f 91       	pop	r18
 11c:	0f 90       	pop	r0
 11e:	0f be       	out	0x3f, r0	; 63
 120:	0f 90       	pop	r0
 122:	1f 90       	pop	r1
 124:	18 95       	reti

00000126 <__vector_20>:

//*************************************************
//Handler de Interrupcion de Transmisi�n Completa TXC
//**************************************************

ISR(USART_TX_vect){ //handler de interrupci�n de TXC 
 126:	1f 92       	push	r1
 128:	0f 92       	push	r0
 12a:	0f b6       	in	r0, 0x3f	; 63
 12c:	0f 92       	push	r0
 12e:	11 24       	eor	r1, r1
 130:	2f 93       	push	r18
 132:	3f 93       	push	r19
 134:	4f 93       	push	r20
 136:	5f 93       	push	r21
 138:	6f 93       	push	r22
 13a:	7f 93       	push	r23
 13c:	8f 93       	push	r24
 13e:	9f 93       	push	r25
 140:	af 93       	push	r26
 142:	bf 93       	push	r27
 144:	ef 93       	push	r30
 146:	ff 93       	push	r31

	uart_cb_isr_tx();
 148:	0e 94 5c 01 	call	0x2b8	; 0x2b8 <uart_cb_isr_tx>
// 		UDR0='\r';
// 		UDR0='\n'; //ojo esto es posible porque tengo FIFO de 2 bytes en TX
// 		Txindex=0;
// 		uart_cb_transmision_completa();//deshabiito int de TXC hasta que necesite transmitir nuevamnete
// 	}
 14c:	ff 91       	pop	r31
 14e:	ef 91       	pop	r30
 150:	bf 91       	pop	r27
 152:	af 91       	pop	r26
 154:	9f 91       	pop	r25
 156:	8f 91       	pop	r24
 158:	7f 91       	pop	r23
 15a:	6f 91       	pop	r22
 15c:	5f 91       	pop	r21
 15e:	4f 91       	pop	r20
 160:	3f 91       	pop	r19
 162:	2f 91       	pop	r18
 164:	0f 90       	pop	r0
 166:	0f be       	out	0x3f, r0	; 63
 168:	0f 90       	pop	r0
 16a:	1f 90       	pop	r1
 16c:	18 95       	reti

0000016e <SerialPort_Init>:
	// Pooling - Bloqueante hasta que termine de transmitir.
	while(!(UCSR0A & (1<<UDRE0)));
}

void SerialPort_Send_Data(char data){
	UDR0 = data;
 16e:	10 92 c1 00 	sts	0x00C1, r1	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
 172:	96 e0       	ldi	r25, 0x06	; 6
 174:	90 93 c2 00 	sts	0x00C2, r25	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7e00c2>
 178:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7e00c5>
 17c:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7e00c4>
 180:	08 95       	ret

00000182 <SerialPort_TX_Enable>:
 182:	e1 ec       	ldi	r30, 0xC1	; 193
 184:	f0 e0       	ldi	r31, 0x00	; 0
 186:	80 81       	ld	r24, Z
 188:	88 60       	ori	r24, 0x08	; 8
 18a:	80 83       	st	Z, r24
 18c:	08 95       	ret

0000018e <SerialPort_RX_Enable>:
 18e:	e1 ec       	ldi	r30, 0xC1	; 193
 190:	f0 e0       	ldi	r31, 0x00	; 0
 192:	80 81       	ld	r24, Z
 194:	80 61       	ori	r24, 0x10	; 16
 196:	80 83       	st	Z, r24
 198:	08 95       	ret

0000019a <SerialPort_RX_Interrupt_Enable>:
 19a:	e1 ec       	ldi	r30, 0xC1	; 193
 19c:	f0 e0       	ldi	r31, 0x00	; 0
 19e:	80 81       	ld	r24, Z
 1a0:	80 68       	ori	r24, 0x80	; 128
 1a2:	80 83       	st	Z, r24
 1a4:	08 95       	ret

000001a6 <SerialPort_Wait_For_TX_Buffer_Free>:
 1a6:	e0 ec       	ldi	r30, 0xC0	; 192
 1a8:	f0 e0       	ldi	r31, 0x00	; 0
 1aa:	80 81       	ld	r24, Z
 1ac:	85 ff       	sbrs	r24, 5
 1ae:	fd cf       	rjmp	.-6      	; 0x1aa <SerialPort_Wait_For_TX_Buffer_Free+0x4>
 1b0:	08 95       	ret

000001b2 <SerialPort_Send_String>:
}

void SerialPort_Send_String(char * msg){ //msg -> "Hola como andan hoy?" 20 ASCII+findecadena, tardo=20ms
 1b2:	cf 92       	push	r12
 1b4:	df 92       	push	r13
 1b6:	ef 92       	push	r14
 1b8:	ff 92       	push	r15
 1ba:	0f 93       	push	r16
 1bc:	1f 93       	push	r17
 1be:	cf 93       	push	r28
	uint8_t i = 0;
	//'\0' = 0x00
	while(msg[i]){ // *(msg+i)
 1c0:	fc 01       	movw	r30, r24
 1c2:	20 81       	ld	r18, Z
 1c4:	22 23       	and	r18, r18
 1c6:	b1 f0       	breq	.+44     	; 0x1f4 <SerialPort_Send_String+0x42>
 1c8:	7c 01       	movw	r14, r24
 1ca:	8c 01       	movw	r16, r24
 1cc:	c0 e0       	ldi	r28, 0x00	; 0
	// Pooling - Bloqueante hasta que termine de transmitir.
	while(!(UCSR0A & (1<<UDRE0)));
}

void SerialPort_Send_Data(char data){
	UDR0 = data;
 1ce:	0f 2e       	mov	r0, r31
 1d0:	f6 ec       	ldi	r31, 0xC6	; 198
 1d2:	cf 2e       	mov	r12, r31
 1d4:	d1 2c       	mov	r13, r1
 1d6:	f0 2d       	mov	r31, r0

void SerialPort_Send_String(char * msg){ //msg -> "Hola como andan hoy?" 20 ASCII+findecadena, tardo=20ms
	uint8_t i = 0;
	//'\0' = 0x00
	while(msg[i]){ // *(msg+i)
		SerialPort_Wait_For_TX_Buffer_Free(); //9600bps formato 8N1, 10bits, 10.Tbit=10/9600=1ms 
 1d8:	0e 94 d3 00 	call	0x1a6	; 0x1a6 <SerialPort_Wait_For_TX_Buffer_Free>
		SerialPort_Send_Data(msg[i]);
 1dc:	f8 01       	movw	r30, r16
 1de:	90 81       	ld	r25, Z
	// Pooling - Bloqueante hasta que termine de transmitir.
	while(!(UCSR0A & (1<<UDRE0)));
}

void SerialPort_Send_Data(char data){
	UDR0 = data;
 1e0:	f6 01       	movw	r30, r12
 1e2:	90 83       	st	Z, r25
	uint8_t i = 0;
	//'\0' = 0x00
	while(msg[i]){ // *(msg+i)
		SerialPort_Wait_For_TX_Buffer_Free(); //9600bps formato 8N1, 10bits, 10.Tbit=10/9600=1ms 
		SerialPort_Send_Data(msg[i]);
		i++;
 1e4:	cf 5f       	subi	r28, 0xFF	; 255
}

void SerialPort_Send_String(char * msg){ //msg -> "Hola como andan hoy?" 20 ASCII+findecadena, tardo=20ms
	uint8_t i = 0;
	//'\0' = 0x00
	while(msg[i]){ // *(msg+i)
 1e6:	87 01       	movw	r16, r14
 1e8:	0c 0f       	add	r16, r28
 1ea:	11 1d       	adc	r17, r1
 1ec:	f8 01       	movw	r30, r16
 1ee:	90 81       	ld	r25, Z
 1f0:	91 11       	cpse	r25, r1
 1f2:	f2 cf       	rjmp	.-28     	; 0x1d8 <SerialPort_Send_String+0x26>
		SerialPort_Wait_For_TX_Buffer_Free(); //9600bps formato 8N1, 10bits, 10.Tbit=10/9600=1ms 
		SerialPort_Send_Data(msg[i]);
		i++;
	}
}
 1f4:	cf 91       	pop	r28
 1f6:	1f 91       	pop	r17
 1f8:	0f 91       	pop	r16
 1fa:	ff 90       	pop	r15
 1fc:	ef 90       	pop	r14
 1fe:	df 90       	pop	r13
 200:	cf 90       	pop	r12
 202:	08 95       	ret

00000204 <uart_cb_init>:
}

char uart_cb_recibir_dato()
{
	return UDR0;
}
 204:	0e 94 b7 00 	call	0x16e	; 0x16e <SerialPort_Init>
 208:	0e 94 c1 00 	call	0x182	; 0x182 <SerialPort_TX_Enable>
 20c:	0e 94 c7 00 	call	0x18e	; 0x18e <SerialPort_RX_Enable>
 210:	0e 94 cd 00 	call	0x19a	; 0x19a <SerialPort_RX_Interrupt_Enable>
 214:	87 e1       	ldi	r24, 0x17	; 23
 216:	91 e0       	ldi	r25, 0x01	; 1
 218:	0e 94 d9 00 	call	0x1b2	; 0x1b2 <SerialPort_Send_String>
 21c:	78 94       	sei
 21e:	08 95       	ret

00000220 <uart_cb_listo_para_transmitir>:
 220:	e1 ec       	ldi	r30, 0xC1	; 193
 222:	f0 e0       	ldi	r31, 0x00	; 0
 224:	80 81       	ld	r24, Z
 226:	80 64       	ori	r24, 0x40	; 64
 228:	80 83       	st	Z, r24
 22a:	08 95       	ret

0000022c <uart_cb_transmision_completa>:
 22c:	e1 ec       	ldi	r30, 0xC1	; 193
 22e:	f0 e0       	ldi	r31, 0x00	; 0
 230:	80 81       	ld	r24, Z
 232:	8f 7b       	andi	r24, 0xBF	; 191
 234:	80 83       	st	Z, r24
 236:	08 95       	ret

00000238 <uart_cb_isr_rx>:

char uart_cb_isr_rx()
{
 238:	cf 93       	push	r28
 23a:	df 93       	push	r29
 23c:	1f 92       	push	r1
 23e:	cd b7       	in	r28, 0x3d	; 61
 240:	de b7       	in	r29, 0x3e	; 62
		volatile char RX_Data = '\r';
 242:	8d e0       	ldi	r24, 0x0D	; 13
 244:	89 83       	std	Y+1, r24	; 0x01
	UDR0 = dato;
}

char uart_cb_recibir_dato()
{
	return UDR0;
 246:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
char uart_cb_isr_rx()
{
		volatile char RX_Data = '\r';
		static short int rxIndex=0;

		RX_Data = uart_cb_recibir_dato();
 24a:	89 83       	std	Y+1, r24	; 0x01

		if(RX_Data != '\r'){
 24c:	89 81       	ldd	r24, Y+1	; 0x01
 24e:	8d 30       	cpi	r24, 0x0D	; 13
 250:	f1 f0       	breq	.+60     	; 0x28e <uart_cb_isr_rx+0x56>
			if(rxIndex >= tam_buffer)
 252:	80 91 5d 01 	lds	r24, 0x015D	; 0x80015d <rxIndex.1660>
 256:	90 91 5e 01 	lds	r25, 0x015E	; 0x80015e <rxIndex.1660+0x1>
 25a:	8f 3f       	cpi	r24, 0xFF	; 255
 25c:	91 05       	cpc	r25, r1
 25e:	29 f0       	breq	.+10     	; 0x26a <uart_cb_isr_rx+0x32>
 260:	24 f0       	brlt	.+8      	; 0x26a <uart_cb_isr_rx+0x32>
			{
				rxIndex = 0;
 262:	10 92 5e 01 	sts	0x015E, r1	; 0x80015e <rxIndex.1660+0x1>
 266:	10 92 5d 01 	sts	0x015D, r1	; 0x80015d <rxIndex.1660>
			}
			BufferRX[rxIndex++] = RX_Data;
 26a:	80 91 5d 01 	lds	r24, 0x015D	; 0x80015d <rxIndex.1660>
 26e:	90 91 5e 01 	lds	r25, 0x015E	; 0x80015e <rxIndex.1660+0x1>
 272:	9c 01       	movw	r18, r24
 274:	2f 5f       	subi	r18, 0xFF	; 255
 276:	3f 4f       	sbci	r19, 0xFF	; 255
 278:	30 93 5e 01 	sts	0x015E, r19	; 0x80015e <rxIndex.1660+0x1>
 27c:	20 93 5d 01 	sts	0x015D, r18	; 0x80015d <rxIndex.1660>
 280:	29 81       	ldd	r18, Y+1	; 0x01
 282:	fc 01       	movw	r30, r24
 284:	e0 5a       	subi	r30, 0xA0	; 160
 286:	fd 4f       	sbci	r31, 0xFD	; 253
 288:	20 83       	st	Z, r18
		else{
			BufferRX[rxIndex] = '\0';
			rxIndex = 0;
			return 1;
		}
		return 0;
 28a:	80 e0       	ldi	r24, 0x00	; 0
 28c:	0c c0       	rjmp	.+24     	; 0x2a6 <uart_cb_isr_rx+0x6e>
				rxIndex = 0;
			}
			BufferRX[rxIndex++] = RX_Data;
		}
		else{
			BufferRX[rxIndex] = '\0';
 28e:	e0 91 5d 01 	lds	r30, 0x015D	; 0x80015d <rxIndex.1660>
 292:	f0 91 5e 01 	lds	r31, 0x015E	; 0x80015e <rxIndex.1660+0x1>
 296:	e0 5a       	subi	r30, 0xA0	; 160
 298:	fd 4f       	sbci	r31, 0xFD	; 253
 29a:	10 82       	st	Z, r1
			rxIndex = 0;
 29c:	10 92 5e 01 	sts	0x015E, r1	; 0x80015e <rxIndex.1660+0x1>
 2a0:	10 92 5d 01 	sts	0x015D, r1	; 0x80015d <rxIndex.1660>
			return 1;
 2a4:	81 e0       	ldi	r24, 0x01	; 1
		}
		return 0;
}
 2a6:	0f 90       	pop	r0
 2a8:	df 91       	pop	r29
 2aa:	cf 91       	pop	r28
 2ac:	08 95       	ret

000002ae <uart_cb_ultima_recepcion>:

void uart_cb_ultima_recepcion(char *paquete)
{
	strcpy(paquete,BufferRX);
 2ae:	60 e6       	ldi	r22, 0x60	; 96
 2b0:	72 e0       	ldi	r23, 0x02	; 2
 2b2:	0e 94 b1 01 	call	0x362	; 0x362 <strcpy>
 2b6:	08 95       	ret

000002b8 <uart_cb_isr_tx>:
}

void uart_cb_isr_tx()
{
 2b8:	cf 93       	push	r28
 2ba:	df 93       	push	r29
	static short int txIndex = 0;
	
	if(BufferTX[txIndex] != '\0' && txIndex < tam_buffer)
 2bc:	80 91 5b 01 	lds	r24, 0x015B	; 0x80015b <txIndex.1666>
 2c0:	90 91 5c 01 	lds	r25, 0x015C	; 0x80015c <txIndex.1666+0x1>
 2c4:	fc 01       	movw	r30, r24
 2c6:	e0 5a       	subi	r30, 0xA0	; 160
 2c8:	fe 4f       	sbci	r31, 0xFE	; 254
 2ca:	20 81       	ld	r18, Z
 2cc:	22 23       	and	r18, r18
 2ce:	a1 f0       	breq	.+40     	; 0x2f8 <uart_cb_isr_tx+0x40>
 2d0:	8f 3f       	cpi	r24, 0xFF	; 255
 2d2:	91 05       	cpc	r25, r1
 2d4:	09 f0       	breq	.+2      	; 0x2d8 <uart_cb_isr_tx+0x20>
 2d6:	84 f4       	brge	.+32     	; 0x2f8 <uart_cb_isr_tx+0x40>
	{
		uart_cb_enviar_dato(BufferTX[txIndex++]);
 2d8:	9c 01       	movw	r18, r24
 2da:	2f 5f       	subi	r18, 0xFF	; 255
 2dc:	3f 4f       	sbci	r19, 0xFF	; 255
 2de:	30 93 5c 01 	sts	0x015C, r19	; 0x80015c <txIndex.1666+0x1>
 2e2:	20 93 5b 01 	sts	0x015B, r18	; 0x80015b <txIndex.1666>
 2e6:	fc 01       	movw	r30, r24
 2e8:	e0 5a       	subi	r30, 0xA0	; 160
 2ea:	fe 4f       	sbci	r31, 0xFE	; 254
 2ec:	c0 81       	ld	r28, Z
}


void uart_cb_enviar_dato(char dato)
{
	SerialPort_Wait_For_TX_Buffer_Free();
 2ee:	0e 94 d3 00 	call	0x1a6	; 0x1a6 <SerialPort_Wait_For_TX_Buffer_Free>
	UDR0 = dato;
 2f2:	c0 93 c6 00 	sts	0x00C6, r28	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
 2f6:	14 c0       	rjmp	.+40     	; 0x320 <uart_cb_isr_tx+0x68>
}


void uart_cb_enviar_dato(char dato)
{
	SerialPort_Wait_For_TX_Buffer_Free();
 2f8:	0e 94 d3 00 	call	0x1a6	; 0x1a6 <SerialPort_Wait_For_TX_Buffer_Free>
	UDR0 = dato;
 2fc:	c6 ec       	ldi	r28, 0xC6	; 198
 2fe:	d0 e0       	ldi	r29, 0x00	; 0
 300:	8d e0       	ldi	r24, 0x0D	; 13
 302:	88 83       	st	Y, r24
}


void uart_cb_enviar_dato(char dato)
{
	SerialPort_Wait_For_TX_Buffer_Free();
 304:	0e 94 d3 00 	call	0x1a6	; 0x1a6 <SerialPort_Wait_For_TX_Buffer_Free>
	UDR0 = dato;
 308:	8a e0       	ldi	r24, 0x0A	; 10
 30a:	88 83       	st	Y, r24
	}
	else
	{
		uart_cb_enviar_dato('\r');
		uart_cb_enviar_dato('\n'); //ojo esto es posible porque tengo FIFO de 2 bytes en TX
		txIndex = 0;
 30c:	10 92 5c 01 	sts	0x015C, r1	; 0x80015c <txIndex.1666+0x1>
 310:	10 92 5b 01 	sts	0x015B, r1	; 0x80015b <txIndex.1666>
		BufferTX[txIndex] = '\0';
 314:	10 92 60 01 	sts	0x0160, r1	; 0x800160 <BufferTX>
		nivel_bufferTx = 0;
 318:	10 92 5f 01 	sts	0x015F, r1	; 0x80015f <nivel_bufferTx>
		
		uart_cb_transmision_completa();//deshabiito int de TXC hasta que necesite transmitir nuevamnete
 31c:	0e 94 16 01 	call	0x22c	; 0x22c <uart_cb_transmision_completa>
	}
}
 320:	df 91       	pop	r29
 322:	cf 91       	pop	r28
 324:	08 95       	ret

00000326 <uart_cb_preparar_transmision>:

void uart_cb_preparar_transmision(char *paquete)
{
	nivel_bufferTx = nivel_bufferTx + strlen(paquete) + 1;
 326:	fc 01       	movw	r30, r24
 328:	01 90       	ld	r0, Z+
 32a:	00 20       	and	r0, r0
 32c:	e9 f7       	brne	.-6      	; 0x328 <uart_cb_preparar_transmision+0x2>
 32e:	31 97       	sbiw	r30, 0x01	; 1
 330:	e8 1b       	sub	r30, r24
 332:	f9 0b       	sbc	r31, r25
 334:	20 91 5f 01 	lds	r18, 0x015F	; 0x80015f <nivel_bufferTx>
 338:	2f 5f       	subi	r18, 0xFF	; 255
 33a:	e2 0f       	add	r30, r18
 33c:	e0 93 5f 01 	sts	0x015F, r30	; 0x80015f <nivel_bufferTx>
	if (nivel_bufferTx < tam_buffer)
	{
		strcat(BufferTX,paquete);
 340:	bc 01       	movw	r22, r24
 342:	80 e6       	ldi	r24, 0x60	; 96
 344:	91 e0       	ldi	r25, 0x01	; 1
 346:	0e 94 a6 01 	call	0x34c	; 0x34c <strcat>
 34a:	08 95       	ret

0000034c <strcat>:
 34c:	fb 01       	movw	r30, r22
 34e:	dc 01       	movw	r26, r24
 350:	0d 90       	ld	r0, X+
 352:	00 20       	and	r0, r0
 354:	e9 f7       	brne	.-6      	; 0x350 <strcat+0x4>
 356:	11 97       	sbiw	r26, 0x01	; 1
 358:	01 90       	ld	r0, Z+
 35a:	0d 92       	st	X+, r0
 35c:	00 20       	and	r0, r0
 35e:	e1 f7       	brne	.-8      	; 0x358 <strcat+0xc>
 360:	08 95       	ret

00000362 <strcpy>:
 362:	fb 01       	movw	r30, r22
 364:	dc 01       	movw	r26, r24
 366:	01 90       	ld	r0, Z+
 368:	0d 92       	st	X+, r0
 36a:	00 20       	and	r0, r0
 36c:	e1 f7       	brne	.-8      	; 0x366 <strcpy+0x4>
 36e:	08 95       	ret

00000370 <_exit>:
 370:	f8 94       	cli

00000372 <__stop_program>:
 372:	ff cf       	rjmp	.-2      	; 0x372 <__stop_program>
