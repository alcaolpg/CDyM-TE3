
generador.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000026  00800100  00000290  00000324  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000290  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000085  00800126  00800126  0000034a  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000034a  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000037c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000b0  00000000  00000000  000003bc  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000058c  00000000  00000000  0000046c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000029d  00000000  00000000  000009f8  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000454  00000000  00000000  00000c95  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000001ec  00000000  00000000  000010ec  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000320  00000000  00000000  000012d8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000570  00000000  00000000  000015f8  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000c0  00000000  00000000  00001b68  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__vector_18>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 b7 00 	jmp	0x16e	; 0x16e <__vector_20>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e0 e9       	ldi	r30, 0x90	; 144
  7c:	f2 e0       	ldi	r31, 0x02	; 2
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a6 32       	cpi	r26, 0x26	; 38
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	a6 e2       	ldi	r26, 0x26	; 38
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	ab 3a       	cpi	r26, 0xAB	; 171
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 53 00 	call	0xa6	; 0xa6 <main>
  9e:	0c 94 46 01 	jmp	0x28c	; 0x28c <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <main>:
char msg1[] = "Programa con interrupciones de RX \n\r";

int main(void)
{
	// INICIALIZACIONES
	SerialPort_Init(103); 		// Inicializo el Puerto Serie. Con 103 para BAUDRATE = 9600 @ 16MHz
  a6:	87 e6       	ldi	r24, 0x67	; 103
  a8:	0e 94 f4 00 	call	0x1e8	; 0x1e8 <SerialPort_Init>
	SerialPort_TX_Enable();		// Activo el Transmisor del Puerto Serie
  ac:	0e 94 fe 00 	call	0x1fc	; 0x1fc <SerialPort_TX_Enable>
	SerialPort_RX_Enable();		// Activo el Receptor del Puerto Serie
  b0:	0e 94 04 01 	call	0x208	; 0x208 <SerialPort_RX_Enable>
	SerialPort_RX_Interrupt_Enable();	// Activo Interrupci�n de recepcion.
  b4:	0e 94 0a 01 	call	0x214	; 0x214 <SerialPort_RX_Interrupt_Enable>
	sei();								// Activo la mascara global de interrupciones (Bit I del SREG en 1)
  b8:	78 94       	sei

	SerialPort_Send_String(msg1);    // Envio el mensaje de Bienvenida
  ba:	80 e0       	ldi	r24, 0x00	; 0
  bc:	91 e0       	ldi	r25, 0x01	; 1
  be:	0e 94 16 01 	call	0x22c	; 0x22c <SerialPort_Send_String>
	{
		if( FLAG_linea_recibida == 1)
		{
			//SerialPort_Send_String((char *)BufferRX);  // Eco del string (inciso a)
			strcpy(BufferTX,BufferRX);	// Eco del string usando int TX (inciso b)
			UCSR0B |= (1<<TXCIE0);
  c2:	c1 ec       	ldi	r28, 0xC1	; 193
  c4:	d0 e0       	ldi	r29, 0x00	; 0

	SerialPort_Send_String(msg1);    // Envio el mensaje de Bienvenida

	while(1)
	{
		if( FLAG_linea_recibida == 1)
  c6:	80 91 2a 01 	lds	r24, 0x012A	; 0x80012a <FLAG_linea_recibida>
  ca:	81 30       	cpi	r24, 0x01	; 1
  cc:	e1 f7       	brne	.-8      	; 0xc6 <main+0x20>
		{
			//SerialPort_Send_String((char *)BufferRX);  // Eco del string (inciso a)
			strcpy(BufferTX,BufferRX);	// Eco del string usando int TX (inciso b)
  ce:	6b e6       	ldi	r22, 0x6B	; 107
  d0:	71 e0       	ldi	r23, 0x01	; 1
  d2:	8b e2       	ldi	r24, 0x2B	; 43
  d4:	91 e0       	ldi	r25, 0x01	; 1
  d6:	0e 94 3f 01 	call	0x27e	; 0x27e <strcpy>
			UCSR0B |= (1<<TXCIE0);
  da:	88 81       	ld	r24, Y
  dc:	80 64       	ori	r24, 0x40	; 64
  de:	88 83       	st	Y, r24
			FLAG_linea_recibida=0;
  e0:	10 92 2a 01 	sts	0x012A, r1	; 0x80012a <FLAG_linea_recibida>
  e4:	f0 cf       	rjmp	.-32     	; 0xc6 <main+0x20>

000000e6 <__vector_18>:

//*************************************************
//Handler de Interrupcion de byte Recibido
//**************************************************

ISR(USART_RX_vect){
  e6:	1f 92       	push	r1
  e8:	0f 92       	push	r0
  ea:	0f b6       	in	r0, 0x3f	; 63
  ec:	0f 92       	push	r0
  ee:	11 24       	eor	r1, r1
  f0:	2f 93       	push	r18
  f2:	3f 93       	push	r19
  f4:	8f 93       	push	r24
  f6:	9f 93       	push	r25
  f8:	ef 93       	push	r30
  fa:	ff 93       	push	r31
  fc:	cf 93       	push	r28
  fe:	df 93       	push	r29
 100:	1f 92       	push	r1
 102:	cd b7       	in	r28, 0x3d	; 61
 104:	de b7       	in	r29, 0x3e	; 62
	
	volatile char RX_Data = 0;
 106:	19 82       	std	Y+1, r1	; 0x01
	static short int Index=0;

	RX_Data = UDR0;
 108:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
 10c:	89 83       	std	Y+1, r24	; 0x01
	if(RX_Data!='\r'){
 10e:	89 81       	ldd	r24, Y+1	; 0x01
 110:	8d 30       	cpi	r24, 0x0D	; 13
 112:	89 f0       	breq	.+34     	; 0x136 <__vector_18+0x50>
		BufferRX[Index++]=RX_Data;
 114:	80 91 28 01 	lds	r24, 0x0128	; 0x800128 <Index.1656>
 118:	90 91 29 01 	lds	r25, 0x0129	; 0x800129 <Index.1656+0x1>
 11c:	9c 01       	movw	r18, r24
 11e:	2f 5f       	subi	r18, 0xFF	; 255
 120:	3f 4f       	sbci	r19, 0xFF	; 255
 122:	30 93 29 01 	sts	0x0129, r19	; 0x800129 <Index.1656+0x1>
 126:	20 93 28 01 	sts	0x0128, r18	; 0x800128 <Index.1656>
 12a:	29 81       	ldd	r18, Y+1	; 0x01
 12c:	fc 01       	movw	r30, r24
 12e:	e5 59       	subi	r30, 0x95	; 149
 130:	fe 4f       	sbci	r31, 0xFE	; 254
 132:	20 83       	st	Z, r18
 134:	0e c0       	rjmp	.+28     	; 0x152 <__vector_18+0x6c>
	}
	else{
		//	    BufferRX[Index++]='\r'; //opcional
		//		BufferRX[Index++]='\n';
		BufferRX[Index]='\0';
 136:	e0 91 28 01 	lds	r30, 0x0128	; 0x800128 <Index.1656>
 13a:	f0 91 29 01 	lds	r31, 0x0129	; 0x800129 <Index.1656+0x1>
 13e:	e5 59       	subi	r30, 0x95	; 149
 140:	fe 4f       	sbci	r31, 0xFE	; 254
 142:	10 82       	st	Z, r1
		Index=0;
 144:	10 92 29 01 	sts	0x0129, r1	; 0x800129 <Index.1656+0x1>
 148:	10 92 28 01 	sts	0x0128, r1	; 0x800128 <Index.1656>
		FLAG_linea_recibida=1;
 14c:	81 e0       	ldi	r24, 0x01	; 1
 14e:	80 93 2a 01 	sts	0x012A, r24	; 0x80012a <FLAG_linea_recibida>
	}
}
 152:	0f 90       	pop	r0
 154:	df 91       	pop	r29
 156:	cf 91       	pop	r28
 158:	ff 91       	pop	r31
 15a:	ef 91       	pop	r30
 15c:	9f 91       	pop	r25
 15e:	8f 91       	pop	r24
 160:	3f 91       	pop	r19
 162:	2f 91       	pop	r18
 164:	0f 90       	pop	r0
 166:	0f be       	out	0x3f, r0	; 63
 168:	0f 90       	pop	r0
 16a:	1f 90       	pop	r1
 16c:	18 95       	reti

0000016e <__vector_20>:

//*************************************************
//Handler de Interrupcion de Transmisi�n Completa TXC
//**************************************************

ISR(USART_TX_vect){ //handler de interrupci�n de TXC 
 16e:	1f 92       	push	r1
 170:	0f 92       	push	r0
 172:	0f b6       	in	r0, 0x3f	; 63
 174:	0f 92       	push	r0
 176:	11 24       	eor	r1, r1
 178:	2f 93       	push	r18
 17a:	8f 93       	push	r24
 17c:	9f 93       	push	r25
 17e:	ef 93       	push	r30
 180:	ff 93       	push	r31

	static short int Txindex=0;
	
	if(BufferTX[Txindex]!='\0'){
 182:	80 91 26 01 	lds	r24, 0x0126	; 0x800126 <__data_end>
 186:	90 91 27 01 	lds	r25, 0x0127	; 0x800127 <__data_end+0x1>
 18a:	fc 01       	movw	r30, r24
 18c:	e5 5d       	subi	r30, 0xD5	; 213
 18e:	fe 4f       	sbci	r31, 0xFE	; 254
 190:	20 81       	ld	r18, Z
 192:	22 23       	and	r18, r18
 194:	81 f0       	breq	.+32     	; 0x1b6 <__vector_20+0x48>
		UDR0=BufferTX[Txindex];
 196:	fc 01       	movw	r30, r24
 198:	e5 5d       	subi	r30, 0xD5	; 213
 19a:	fe 4f       	sbci	r31, 0xFE	; 254
 19c:	80 81       	ld	r24, Z
 19e:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
		Txindex++;
 1a2:	80 91 26 01 	lds	r24, 0x0126	; 0x800126 <__data_end>
 1a6:	90 91 27 01 	lds	r25, 0x0127	; 0x800127 <__data_end+0x1>
 1aa:	01 96       	adiw	r24, 0x01	; 1
 1ac:	90 93 27 01 	sts	0x0127, r25	; 0x800127 <__data_end+0x1>
 1b0:	80 93 26 01 	sts	0x0126, r24	; 0x800126 <__data_end>
 1b4:	0f c0       	rjmp	.+30     	; 0x1d4 <__vector_20+0x66>
	}
	else{
		UDR0='\r';
 1b6:	e6 ec       	ldi	r30, 0xC6	; 198
 1b8:	f0 e0       	ldi	r31, 0x00	; 0
 1ba:	8d e0       	ldi	r24, 0x0D	; 13
 1bc:	80 83       	st	Z, r24
		UDR0='\n'; //ojo esto es posible porque tengo FIFO de 2 bytes en TX
 1be:	8a e0       	ldi	r24, 0x0A	; 10
 1c0:	80 83       	st	Z, r24
		Txindex=0;
 1c2:	10 92 27 01 	sts	0x0127, r1	; 0x800127 <__data_end+0x1>
 1c6:	10 92 26 01 	sts	0x0126, r1	; 0x800126 <__data_end>
		UCSR0B &=~(1<<TXCIE0);//deshabiito int de TXC hasta que necesite transmitir nuevamnete
 1ca:	e1 ec       	ldi	r30, 0xC1	; 193
 1cc:	f0 e0       	ldi	r31, 0x00	; 0
 1ce:	80 81       	ld	r24, Z
 1d0:	8f 7b       	andi	r24, 0xBF	; 191
 1d2:	80 83       	st	Z, r24
	}
 1d4:	ff 91       	pop	r31
 1d6:	ef 91       	pop	r30
 1d8:	9f 91       	pop	r25
 1da:	8f 91       	pop	r24
 1dc:	2f 91       	pop	r18
 1de:	0f 90       	pop	r0
 1e0:	0f be       	out	0x3f, r0	; 63
 1e2:	0f 90       	pop	r0
 1e4:	1f 90       	pop	r1
 1e6:	18 95       	reti

000001e8 <SerialPort_Init>:
	// Pooling - Bloqueante hasta que termine de transmitir.
	while(!(UCSR0A & (1<<UDRE0)));
}

void SerialPort_Send_Data(char data){
	UDR0 = data;
 1e8:	10 92 c1 00 	sts	0x00C1, r1	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
 1ec:	96 e0       	ldi	r25, 0x06	; 6
 1ee:	90 93 c2 00 	sts	0x00C2, r25	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7e00c2>
 1f2:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7e00c5>
 1f6:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7e00c4>
 1fa:	08 95       	ret

000001fc <SerialPort_TX_Enable>:
 1fc:	e1 ec       	ldi	r30, 0xC1	; 193
 1fe:	f0 e0       	ldi	r31, 0x00	; 0
 200:	80 81       	ld	r24, Z
 202:	88 60       	ori	r24, 0x08	; 8
 204:	80 83       	st	Z, r24
 206:	08 95       	ret

00000208 <SerialPort_RX_Enable>:
 208:	e1 ec       	ldi	r30, 0xC1	; 193
 20a:	f0 e0       	ldi	r31, 0x00	; 0
 20c:	80 81       	ld	r24, Z
 20e:	80 61       	ori	r24, 0x10	; 16
 210:	80 83       	st	Z, r24
 212:	08 95       	ret

00000214 <SerialPort_RX_Interrupt_Enable>:
 214:	e1 ec       	ldi	r30, 0xC1	; 193
 216:	f0 e0       	ldi	r31, 0x00	; 0
 218:	80 81       	ld	r24, Z
 21a:	80 68       	ori	r24, 0x80	; 128
 21c:	80 83       	st	Z, r24
 21e:	08 95       	ret

00000220 <SerialPort_Wait_For_TX_Buffer_Free>:
 220:	e0 ec       	ldi	r30, 0xC0	; 192
 222:	f0 e0       	ldi	r31, 0x00	; 0
 224:	80 81       	ld	r24, Z
 226:	85 ff       	sbrs	r24, 5
 228:	fd cf       	rjmp	.-6      	; 0x224 <SerialPort_Wait_For_TX_Buffer_Free+0x4>
 22a:	08 95       	ret

0000022c <SerialPort_Send_String>:
}

void SerialPort_Send_String(char * msg){ //msg -> "Hola como andan hoy?" 20 ASCII+findecadena, tardo=20ms
 22c:	cf 92       	push	r12
 22e:	df 92       	push	r13
 230:	ef 92       	push	r14
 232:	ff 92       	push	r15
 234:	0f 93       	push	r16
 236:	1f 93       	push	r17
 238:	cf 93       	push	r28
	uint8_t i = 0;
	//'\0' = 0x00
	while(msg[i]){ // *(msg+i)
 23a:	fc 01       	movw	r30, r24
 23c:	20 81       	ld	r18, Z
 23e:	22 23       	and	r18, r18
 240:	b1 f0       	breq	.+44     	; 0x26e <SerialPort_Send_String+0x42>
 242:	7c 01       	movw	r14, r24
 244:	8c 01       	movw	r16, r24
 246:	c0 e0       	ldi	r28, 0x00	; 0
	// Pooling - Bloqueante hasta que termine de transmitir.
	while(!(UCSR0A & (1<<UDRE0)));
}

void SerialPort_Send_Data(char data){
	UDR0 = data;
 248:	0f 2e       	mov	r0, r31
 24a:	f6 ec       	ldi	r31, 0xC6	; 198
 24c:	cf 2e       	mov	r12, r31
 24e:	d1 2c       	mov	r13, r1
 250:	f0 2d       	mov	r31, r0

void SerialPort_Send_String(char * msg){ //msg -> "Hola como andan hoy?" 20 ASCII+findecadena, tardo=20ms
	uint8_t i = 0;
	//'\0' = 0x00
	while(msg[i]){ // *(msg+i)
		SerialPort_Wait_For_TX_Buffer_Free(); //9600bps formato 8N1, 10bits, 10.Tbit=10/9600=1ms 
 252:	0e 94 10 01 	call	0x220	; 0x220 <SerialPort_Wait_For_TX_Buffer_Free>
		SerialPort_Send_Data(msg[i]);
 256:	f8 01       	movw	r30, r16
 258:	90 81       	ld	r25, Z
	// Pooling - Bloqueante hasta que termine de transmitir.
	while(!(UCSR0A & (1<<UDRE0)));
}

void SerialPort_Send_Data(char data){
	UDR0 = data;
 25a:	f6 01       	movw	r30, r12
 25c:	90 83       	st	Z, r25
	uint8_t i = 0;
	//'\0' = 0x00
	while(msg[i]){ // *(msg+i)
		SerialPort_Wait_For_TX_Buffer_Free(); //9600bps formato 8N1, 10bits, 10.Tbit=10/9600=1ms 
		SerialPort_Send_Data(msg[i]);
		i++;
 25e:	cf 5f       	subi	r28, 0xFF	; 255
}

void SerialPort_Send_String(char * msg){ //msg -> "Hola como andan hoy?" 20 ASCII+findecadena, tardo=20ms
	uint8_t i = 0;
	//'\0' = 0x00
	while(msg[i]){ // *(msg+i)
 260:	87 01       	movw	r16, r14
 262:	0c 0f       	add	r16, r28
 264:	11 1d       	adc	r17, r1
 266:	f8 01       	movw	r30, r16
 268:	90 81       	ld	r25, Z
 26a:	91 11       	cpse	r25, r1
 26c:	f2 cf       	rjmp	.-28     	; 0x252 <SerialPort_Send_String+0x26>
		SerialPort_Wait_For_TX_Buffer_Free(); //9600bps formato 8N1, 10bits, 10.Tbit=10/9600=1ms 
		SerialPort_Send_Data(msg[i]);
		i++;
	}
}
 26e:	cf 91       	pop	r28
 270:	1f 91       	pop	r17
 272:	0f 91       	pop	r16
 274:	ff 90       	pop	r15
 276:	ef 90       	pop	r14
 278:	df 90       	pop	r13
 27a:	cf 90       	pop	r12
 27c:	08 95       	ret

0000027e <strcpy>:
 27e:	fb 01       	movw	r30, r22
 280:	dc 01       	movw	r26, r24
 282:	01 90       	ld	r0, Z+
 284:	0d 92       	st	X+, r0
 286:	00 20       	and	r0, r0
 288:	e1 f7       	brne	.-8      	; 0x282 <strcpy+0x4>
 28a:	08 95       	ret

0000028c <_exit>:
 28c:	f8 94       	cli

0000028e <__stop_program>:
 28e:	ff cf       	rjmp	.-2      	; 0x28e <__stop_program>
