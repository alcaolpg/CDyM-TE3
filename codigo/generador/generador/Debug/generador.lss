
generador.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000004  00800100  000001ce  00000242  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000001ce  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  00000246  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000278  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 000000a8  00000000  00000000  000002b8  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000998  00000000  00000000  00000360  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000766  00000000  00000000  00000cf8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000024c  00000000  00000000  0000145e  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000118  00000000  00000000  000016ac  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000047f  00000000  00000000  000017c4  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000004c  00000000  00000000  00001c43  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000088  00000000  00000000  00001c8f  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
   8:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
   c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  10:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  14:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  18:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  1c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  20:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  24:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  28:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  2c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  30:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  34:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  38:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  3c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  40:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  44:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  48:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  4c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  50:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  54:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  58:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  5c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  60:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  64:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	ee ec       	ldi	r30, 0xCE	; 206
  7c:	f1 e0       	ldi	r31, 0x01	; 1
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a4 30       	cpi	r26, 0x04	; 4
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>
  8a:	0e 94 4b 00 	call	0x96	; 0x96 <main>
  8e:	0c 94 e5 00 	jmp	0x1ca	; 0x1ca <_exit>

00000092 <__bad_interrupt>:
  92:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000096 <main>:
#include "Timer1.h"

int main(void)
{
    /* Replace with your application code */
	TIMER1_set_module();
  96:	0e 94 76 00 	call	0xec	; 0xec <TIMER1_set_module>
	TIMER1_set_frequency("100");
  9a:	80 e0       	ldi	r24, 0x00	; 0
  9c:	91 e0       	ldi	r25, 0x01	; 1
  9e:	0e 94 66 00 	call	0xcc	; 0xcc <TIMER1_set_frequency>
	TIMER1_set_on();
  a2:	0e 94 6b 00 	call	0xd6	; 0xd6 <TIMER1_set_on>
  a6:	ff cf       	rjmp	.-2      	; 0xa6 <main+0x10>

000000a8 <setTopeDelContador>:
}
void setModeTogle(){
	TCCR1A=(1<<COM1A0); //COM1A=Togle  no funciona en modo PWM
}
void setModeCTCnoClock(){
	TCCR1B=0; //Modo CTC no prescaler
  a8:	88 0f       	add	r24, r24
  aa:	99 1f       	adc	r25, r25
  ac:	9c 01       	movw	r18, r24
  ae:	40 e0       	ldi	r20, 0x00	; 0
  b0:	50 e0       	ldi	r21, 0x00	; 0
  b2:	60 e0       	ldi	r22, 0x00	; 0
  b4:	72 e1       	ldi	r23, 0x12	; 18
  b6:	8a e7       	ldi	r24, 0x7A	; 122
  b8:	90 e0       	ldi	r25, 0x00	; 0
  ba:	0e 94 7e 00 	call	0xfc	; 0xfc <__divmodsi4>
  be:	21 50       	subi	r18, 0x01	; 1
  c0:	31 09       	sbc	r19, r1
  c2:	30 93 89 00 	sts	0x0089, r19	; 0x800089 <__TEXT_REGION_LENGTH__+0x7f8089>
  c6:	20 93 88 00 	sts	0x0088, r18	; 0x800088 <__TEXT_REGION_LENGTH__+0x7f8088>
  ca:	08 95       	ret

000000cc <TIMER1_set_frequency>:
  cc:	0e 94 bf 00 	call	0x17e	; 0x17e <atoi>
  d0:	0e 94 54 00 	call	0xa8	; 0xa8 <setTopeDelContador>
  d4:	08 95       	ret

000000d6 <TIMER1_set_on>:
  d6:	89 e0       	ldi	r24, 0x09	; 9
  d8:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7f8081>
  dc:	08 95       	ret

000000de <TIMER1_reset_module>:
  de:	10 92 81 00 	sts	0x0081, r1	; 0x800081 <__TEXT_REGION_LENGTH__+0x7f8081>
void TIMER1_set_off(){
	setModeCTCnoClock();
}
void TIMER1_reset_module(){
	TIMER1_set_off();
	setTopeDelContador(6435);
  e2:	83 e2       	ldi	r24, 0x23	; 35
  e4:	99 e1       	ldi	r25, 0x19	; 25
  e6:	0e 94 54 00 	call	0xa8	; 0xa8 <setTopeDelContador>
  ea:	08 95       	ret

000000ec <TIMER1_set_module>:
}


//funciones publicas
void TIMER1_set_module(){
	TIMER1_reset_module();
  ec:	0e 94 6f 00 	call	0xde	; 0xde <TIMER1_reset_module>
//parametros de configuracion del timer
volatile uint8_t Preescaler=1;

//Funciones globales pero privadas al archivo TIMER1.c
void setOutPB1(){
	DDRB=(1<<PB1); //PB1=salida
  f0:	82 e0       	ldi	r24, 0x02	; 2
  f2:	84 b9       	out	0x04, r24	; 4
}
void setModeTogle(){
	TCCR1A=(1<<COM1A0); //COM1A=Togle  no funciona en modo PWM
  f4:	80 e4       	ldi	r24, 0x40	; 64
  f6:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__TEXT_REGION_LENGTH__+0x7f8080>
  fa:	08 95       	ret

000000fc <__divmodsi4>:
  fc:	05 2e       	mov	r0, r21
  fe:	97 fb       	bst	r25, 7
 100:	1e f4       	brtc	.+6      	; 0x108 <__divmodsi4+0xc>
 102:	00 94       	com	r0
 104:	0e 94 95 00 	call	0x12a	; 0x12a <__negsi2>
 108:	57 fd       	sbrc	r21, 7
 10a:	07 d0       	rcall	.+14     	; 0x11a <__divmodsi4_neg2>
 10c:	0e 94 9d 00 	call	0x13a	; 0x13a <__udivmodsi4>
 110:	07 fc       	sbrc	r0, 7
 112:	03 d0       	rcall	.+6      	; 0x11a <__divmodsi4_neg2>
 114:	4e f4       	brtc	.+18     	; 0x128 <__divmodsi4_exit>
 116:	0c 94 95 00 	jmp	0x12a	; 0x12a <__negsi2>

0000011a <__divmodsi4_neg2>:
 11a:	50 95       	com	r21
 11c:	40 95       	com	r20
 11e:	30 95       	com	r19
 120:	21 95       	neg	r18
 122:	3f 4f       	sbci	r19, 0xFF	; 255
 124:	4f 4f       	sbci	r20, 0xFF	; 255
 126:	5f 4f       	sbci	r21, 0xFF	; 255

00000128 <__divmodsi4_exit>:
 128:	08 95       	ret

0000012a <__negsi2>:
 12a:	90 95       	com	r25
 12c:	80 95       	com	r24
 12e:	70 95       	com	r23
 130:	61 95       	neg	r22
 132:	7f 4f       	sbci	r23, 0xFF	; 255
 134:	8f 4f       	sbci	r24, 0xFF	; 255
 136:	9f 4f       	sbci	r25, 0xFF	; 255
 138:	08 95       	ret

0000013a <__udivmodsi4>:
 13a:	a1 e2       	ldi	r26, 0x21	; 33
 13c:	1a 2e       	mov	r1, r26
 13e:	aa 1b       	sub	r26, r26
 140:	bb 1b       	sub	r27, r27
 142:	fd 01       	movw	r30, r26
 144:	0d c0       	rjmp	.+26     	; 0x160 <__udivmodsi4_ep>

00000146 <__udivmodsi4_loop>:
 146:	aa 1f       	adc	r26, r26
 148:	bb 1f       	adc	r27, r27
 14a:	ee 1f       	adc	r30, r30
 14c:	ff 1f       	adc	r31, r31
 14e:	a2 17       	cp	r26, r18
 150:	b3 07       	cpc	r27, r19
 152:	e4 07       	cpc	r30, r20
 154:	f5 07       	cpc	r31, r21
 156:	20 f0       	brcs	.+8      	; 0x160 <__udivmodsi4_ep>
 158:	a2 1b       	sub	r26, r18
 15a:	b3 0b       	sbc	r27, r19
 15c:	e4 0b       	sbc	r30, r20
 15e:	f5 0b       	sbc	r31, r21

00000160 <__udivmodsi4_ep>:
 160:	66 1f       	adc	r22, r22
 162:	77 1f       	adc	r23, r23
 164:	88 1f       	adc	r24, r24
 166:	99 1f       	adc	r25, r25
 168:	1a 94       	dec	r1
 16a:	69 f7       	brne	.-38     	; 0x146 <__udivmodsi4_loop>
 16c:	60 95       	com	r22
 16e:	70 95       	com	r23
 170:	80 95       	com	r24
 172:	90 95       	com	r25
 174:	9b 01       	movw	r18, r22
 176:	ac 01       	movw	r20, r24
 178:	bd 01       	movw	r22, r26
 17a:	cf 01       	movw	r24, r30
 17c:	08 95       	ret

0000017e <atoi>:
 17e:	fc 01       	movw	r30, r24
 180:	88 27       	eor	r24, r24
 182:	99 27       	eor	r25, r25
 184:	e8 94       	clt
 186:	21 91       	ld	r18, Z+
 188:	20 32       	cpi	r18, 0x20	; 32
 18a:	e9 f3       	breq	.-6      	; 0x186 <atoi+0x8>
 18c:	29 30       	cpi	r18, 0x09	; 9
 18e:	10 f0       	brcs	.+4      	; 0x194 <atoi+0x16>
 190:	2e 30       	cpi	r18, 0x0E	; 14
 192:	c8 f3       	brcs	.-14     	; 0x186 <atoi+0x8>
 194:	2b 32       	cpi	r18, 0x2B	; 43
 196:	41 f0       	breq	.+16     	; 0x1a8 <atoi+0x2a>
 198:	2d 32       	cpi	r18, 0x2D	; 45
 19a:	39 f4       	brne	.+14     	; 0x1aa <atoi+0x2c>
 19c:	68 94       	set
 19e:	04 c0       	rjmp	.+8      	; 0x1a8 <atoi+0x2a>
 1a0:	0e 94 dd 00 	call	0x1ba	; 0x1ba <__mulhi_const_10>
 1a4:	82 0f       	add	r24, r18
 1a6:	91 1d       	adc	r25, r1
 1a8:	21 91       	ld	r18, Z+
 1aa:	20 53       	subi	r18, 0x30	; 48
 1ac:	2a 30       	cpi	r18, 0x0A	; 10
 1ae:	c0 f3       	brcs	.-16     	; 0x1a0 <atoi+0x22>
 1b0:	1e f4       	brtc	.+6      	; 0x1b8 <atoi+0x3a>
 1b2:	90 95       	com	r25
 1b4:	81 95       	neg	r24
 1b6:	9f 4f       	sbci	r25, 0xFF	; 255
 1b8:	08 95       	ret

000001ba <__mulhi_const_10>:
 1ba:	7a e0       	ldi	r23, 0x0A	; 10
 1bc:	97 9f       	mul	r25, r23
 1be:	90 2d       	mov	r25, r0
 1c0:	87 9f       	mul	r24, r23
 1c2:	80 2d       	mov	r24, r0
 1c4:	91 0d       	add	r25, r1
 1c6:	11 24       	eor	r1, r1
 1c8:	08 95       	ret

000001ca <_exit>:
 1ca:	f8 94       	cli

000001cc <__stop_program>:
 1cc:	ff cf       	rjmp	.-2      	; 0x1cc <__stop_program>
